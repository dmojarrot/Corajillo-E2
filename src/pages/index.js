import Head from "next/head"
import NavBar from "@/components/NavBar"
import Tables from "@/components/Tables"
import { dehydrate, QueryClient, useQuery } from "@tanstack/react-query"
import getInventory from "@/lib/get_inventory_proceso"
import getOrders from "@/lib/get_orders"
import getMissingProduction from "@/lib/get_missing_production"

export default function Home() {
  const inventory = useQuery({
    queryKey: ["inventory"],
    queryFn: getInventory,
  })

  const orders = useQuery({ queryKey: ["orders"], queryFn: getOrders })

  const missingProduction = useQuery({
    queryKey: ["missingProduction"],
    queryFn: getMissingProduction,
  })

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className="min-h-full">
          <NavBar />

          <header className="bg-white shadow">
            <div className="mx-auto max-w-7xl py-6 px-4 sm:px-6 lg:px-8">
              <h1 className="text-3xl font-bold tracking-tight text-gray-900">
                Dashboard
              </h1>
            </div>
          </header>
          <main>
            <div className="mx-auto max-w-7xl pt-6 px-2 md:px-0">
              <Tables
                inventory={inventory}
                orders={orders}
                missingProduction={missingProduction}
              />
            </div>
          </main>
        </div>
      </main>
    </>
  )
}

// This function gets called at build time on server-side.
// It won't be called on client-side, so you can even do
// direct database queries.
export async function getServerSideProps() {
  // this query stuff is a highly efficient data fetching library
  const queryClient = new QueryClient()
  await queryClient.prefetchQuery(["inventory"], getInventory)
  await queryClient.prefetchQuery(["orders"], getOrders)
  await queryClient.prefetchQuery(["missingProduction"], getMissingProduction)
  return {
    props: {
      dehydratedState: dehydrate(queryClient),
    },
  }
}
